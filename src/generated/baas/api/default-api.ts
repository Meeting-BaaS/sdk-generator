/* tslint:disable */
/* eslint-disable */
/**
 * Meeting BaaS API
 * Meeting BaaS API
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { basePath, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteResponse } from '../models';
// @ts-ignore
import type { JoinRequest } from '../models';
// @ts-ignore
import type { JoinResponse } from '../models';
// @ts-ignore
import type { LeaveResponse } from '../models';
// @ts-ignore
import type { ListRecentBotsResponse } from '../models';
// @ts-ignore
import type { Metadata } from '../models';
// @ts-ignore
import type { RetranscribeBody } from '../models';
// @ts-ignore
import type { ScreenshotWrapper } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a paginated list of the user\'s bots with essential metadata, including IDs, names, and meeting details. Supports filtering, sorting, and advanced querying options.
         * @summary List Bots with Metadata
         * @param {string | null} [botName] Filter bots by name containing this string.  Performs a case-insensitive partial match on the bot\&#39;s name. Useful for finding bots with specific naming conventions or to locate a particular bot when you don\&#39;t have its ID.  Example: \&quot;Sales\&quot; would match \&quot;Sales Meeting\&quot;, \&quot;Quarterly Sales\&quot;, etc.
         * @param {string | null} [createdAfter] Filter bots created after this date (ISO format).  Limits results to bots created at or after the specified timestamp. Used for time-based filtering to find recent additions.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-01T00:00:00\&quot;
         * @param {string | null} [createdBefore] Filter bots created before this date (ISO format).  Limits results to bots created at or before the specified timestamp. Used for time-based filtering to exclude recent additions.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-31T23:59:59\&quot;
         * @param {string | null} [cursor] Cursor for pagination, obtained from previous response.  Used for retrieving the next set of results after a previous call. The cursor value is returned in the &#x60;nextCursor&#x60; field of responses that have additional results available.  Format: Base64-encoded string containing pagination metadata
         * @param {string | null} [endedAfter] Filter bots ended after this date (ISO format).  Limits results to bots that ended at or after the specified timestamp. Useful for finding completed meetings within a specific time period.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-01T00:00:00\&quot;
         * @param {string | null} [filterByExtra] Filter bots by matching values in the extra JSON payload.  This parameter performs in-memory filtering on the &#x60;extra&#x60; JSON field, similar to a SQL WHERE clause. It reduces the result set to only include bots that match all specified conditions.  Format specifications: - Single condition: \&quot;field:value\&quot; - Multiple conditions: \&quot;field1:value1,field2:value2\&quot;  Examples: - \&quot;customerId:12345\&quot; - Only bots with this customer ID - \&quot;status:active,project:sales\&quot; - Only active bots from sales projects  Notes: - All conditions must match for a bot to be included - Values are matched exactly (case-sensitive) - Bots without the specified field are excluded
         * @param {number} [limit] Maximum number of bots to return in a single request.  Limits the number of results returned in a single API call. This parameter helps control response size and page length.  Default: 10 Minimum: 1 Maximum: 50
         * @param {string | null} [meetingUrl] Filter bots by meeting URL containing this string.  Performs a case-insensitive partial match on the bot\&#39;s meeting URL. Use this to find bots associated with specific meeting platforms or particular meeting IDs.  Example: \&quot;zoom.us\&quot; would match all Zoom meetings
         * @param {string | null} [sortByExtra] Sort the results by a field in the extra JSON payload.  This parameter performs in-memory sorting on the &#x60;extra&#x60; JSON field, similar to a SQL ORDER BY clause. It changes the order of results but not which results are included.  Format specifications: - Default (ascending): \&quot;field\&quot; - Explicit direction: \&quot;field:asc\&quot; or \&quot;field:desc\&quot;  Examples: - \&quot;customer_id\&quot; - Sort by customer_id (ascending) - \&quot;priority:desc\&quot; - Sort by priority (descending)  Notes: - Applied after all filtering - String comparison is used for sorting - Bots with the field come before bots without it - Can be combined with filter_by_extra
         * @param {string | null} [speakerName] NOTE: this is a preview feature and not yet available  Filter bots by speaker name containing this string.  Performs a case-insensitive partial match on the speakers in the meeting. Useful for finding meetings that included a specific person.  Example: \&quot;John\&quot; would match meetings with speakers like \&quot;John Smith\&quot; or \&quot;John Doe\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsWithMetadata: async (botName?: string | null, createdAfter?: string | null, createdBefore?: string | null, cursor?: string | null, endedAfter?: string | null, filterByExtra?: string | null, limit?: number, meetingUrl?: string | null, sortByExtra?: string | null, speakerName?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bots/bots_with_metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)

            if (botName !== undefined) {
                localVarQueryParameter['bot_name'] = botName;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['created_after'] = createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['created_before'] = createdBefore;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (endedAfter !== undefined) {
                localVarQueryParameter['ended_after'] = endedAfter;
            }

            if (filterByExtra !== undefined) {
                localVarQueryParameter['filter_by_extra'] = filterByExtra;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (meetingUrl !== undefined) {
                localVarQueryParameter['meeting_url'] = meetingUrl;
            }

            if (sortByExtra !== undefined) {
                localVarQueryParameter['sort_by_extra'] = sortByExtra;
            }

            if (speakerName !== undefined) {
                localVarQueryParameter['speaker_name'] = speakerName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a bot\'s data including recording, transcription, and logs. Only metadata is retained. Rate limited to 5 requests per minute per API key.
         * @summary Delete Data
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteData: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteData', 'uuid', uuid)
            const localVarPath = `/bots/{uuid}/delete_data`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get meeting recording and metadata
         * @summary Get Meeting Data
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingData: async (botId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('getMeetingData', 'botId', botId)
            const localVarPath = `/bots/meeting_data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)

            if (botId !== undefined) {
                localVarQueryParameter['bot_id'] = botId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves screenshots captured during the bot\'s session
         * @summary Get Screenshots
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenshots: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getScreenshots', 'uuid', uuid)
            const localVarPath = `/bots/{uuid}/screenshots`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Have a bot join a meeting, now or in the future. You can provide a `webhook_url` parameter to receive webhook events specific to this bot, overriding your account\'s default webhook URL. Events include recording completion, failures, and transcription updates.
         * @summary Join
         * @param {JoinRequest} joinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        join: async (joinRequest: JoinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinRequest' is not null or undefined
            assertParamExists('join', 'joinRequest', joinRequest)
            const localVarPath = `/bots/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Leave
         * @summary Leave
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leave: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('leave', 'uuid', uuid)
            const localVarPath = `/bots/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transcribe or retranscribe a bot\'s audio using the Default or your provided Speech to Text Provider
         * @summary Retranscribe Bot
         * @param {RetranscribeBody} retranscribeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retranscribeBot: async (retranscribeBody: RetranscribeBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'retranscribeBody' is not null or undefined
            assertParamExists('retranscribeBot', 'retranscribeBody', retranscribeBody)
            const localVarPath = `/bots/retranscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(retranscribeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a paginated list of the user\'s bots with essential metadata, including IDs, names, and meeting details. Supports filtering, sorting, and advanced querying options.
         * @summary List Bots with Metadata
         * @param {string | null} [botName] Filter bots by name containing this string.  Performs a case-insensitive partial match on the bot\&#39;s name. Useful for finding bots with specific naming conventions or to locate a particular bot when you don\&#39;t have its ID.  Example: \&quot;Sales\&quot; would match \&quot;Sales Meeting\&quot;, \&quot;Quarterly Sales\&quot;, etc.
         * @param {string | null} [createdAfter] Filter bots created after this date (ISO format).  Limits results to bots created at or after the specified timestamp. Used for time-based filtering to find recent additions.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-01T00:00:00\&quot;
         * @param {string | null} [createdBefore] Filter bots created before this date (ISO format).  Limits results to bots created at or before the specified timestamp. Used for time-based filtering to exclude recent additions.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-31T23:59:59\&quot;
         * @param {string | null} [cursor] Cursor for pagination, obtained from previous response.  Used for retrieving the next set of results after a previous call. The cursor value is returned in the &#x60;nextCursor&#x60; field of responses that have additional results available.  Format: Base64-encoded string containing pagination metadata
         * @param {string | null} [endedAfter] Filter bots ended after this date (ISO format).  Limits results to bots that ended at or after the specified timestamp. Useful for finding completed meetings within a specific time period.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-01T00:00:00\&quot;
         * @param {string | null} [filterByExtra] Filter bots by matching values in the extra JSON payload.  This parameter performs in-memory filtering on the &#x60;extra&#x60; JSON field, similar to a SQL WHERE clause. It reduces the result set to only include bots that match all specified conditions.  Format specifications: - Single condition: \&quot;field:value\&quot; - Multiple conditions: \&quot;field1:value1,field2:value2\&quot;  Examples: - \&quot;customerId:12345\&quot; - Only bots with this customer ID - \&quot;status:active,project:sales\&quot; - Only active bots from sales projects  Notes: - All conditions must match for a bot to be included - Values are matched exactly (case-sensitive) - Bots without the specified field are excluded
         * @param {number} [limit] Maximum number of bots to return in a single request.  Limits the number of results returned in a single API call. This parameter helps control response size and page length.  Default: 10 Minimum: 1 Maximum: 50
         * @param {string | null} [meetingUrl] Filter bots by meeting URL containing this string.  Performs a case-insensitive partial match on the bot\&#39;s meeting URL. Use this to find bots associated with specific meeting platforms or particular meeting IDs.  Example: \&quot;zoom.us\&quot; would match all Zoom meetings
         * @param {string | null} [sortByExtra] Sort the results by a field in the extra JSON payload.  This parameter performs in-memory sorting on the &#x60;extra&#x60; JSON field, similar to a SQL ORDER BY clause. It changes the order of results but not which results are included.  Format specifications: - Default (ascending): \&quot;field\&quot; - Explicit direction: \&quot;field:asc\&quot; or \&quot;field:desc\&quot;  Examples: - \&quot;customer_id\&quot; - Sort by customer_id (ascending) - \&quot;priority:desc\&quot; - Sort by priority (descending)  Notes: - Applied after all filtering - String comparison is used for sorting - Bots with the field come before bots without it - Can be combined with filter_by_extra
         * @param {string | null} [speakerName] NOTE: this is a preview feature and not yet available  Filter bots by speaker name containing this string.  Performs a case-insensitive partial match on the speakers in the meeting. Useful for finding meetings that included a specific person.  Example: \&quot;John\&quot; would match meetings with speakers like \&quot;John Smith\&quot; or \&quot;John Doe\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsWithMetadata(botName?: string | null, createdAfter?: string | null, createdBefore?: string | null, cursor?: string | null, endedAfter?: string | null, filterByExtra?: string | null, limit?: number, meetingUrl?: string | null, sortByExtra?: string | null, speakerName?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRecentBotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsWithMetadata(botName, createdAfter, createdBefore, cursor, endedAfter, filterByExtra, limit, meetingUrl, sortByExtra, speakerName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.botsWithMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a bot\'s data including recording, transcription, and logs. Only metadata is retained. Rate limited to 5 requests per minute per API key.
         * @summary Delete Data
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteData(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteData(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get meeting recording and metadata
         * @summary Get Meeting Data
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingData(botId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Metadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingData(botId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMeetingData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves screenshots captured during the bot\'s session
         * @summary Get Screenshots
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenshots(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScreenshotWrapper>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreenshots(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getScreenshots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Have a bot join a meeting, now or in the future. You can provide a `webhook_url` parameter to receive webhook events specific to this bot, overriding your account\'s default webhook URL. Events include recording completion, failures, and transcription updates.
         * @summary Join
         * @param {JoinRequest} joinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async join(joinRequest: JoinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JoinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.join(joinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.join']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Leave
         * @summary Leave
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leave(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leave(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.leave']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transcribe or retranscribe a bot\'s audio using the Default or your provided Speech to Text Provider
         * @summary Retranscribe Bot
         * @param {RetranscribeBody} retranscribeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retranscribeBot(retranscribeBody: RetranscribeBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retranscribeBot(retranscribeBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.retranscribeBot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Retrieves a paginated list of the user\'s bots with essential metadata, including IDs, names, and meeting details. Supports filtering, sorting, and advanced querying options.
         * @summary List Bots with Metadata
         * @param {DefaultApiBotsWithMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsWithMetadata(requestParameters: DefaultApiBotsWithMetadataRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListRecentBotsResponse> {
            return localVarFp.botsWithMetadata(requestParameters.botName, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.cursor, requestParameters.endedAfter, requestParameters.filterByExtra, requestParameters.limit, requestParameters.meetingUrl, requestParameters.sortByExtra, requestParameters.speakerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a bot\'s data including recording, transcription, and logs. Only metadata is retained. Rate limited to 5 requests per minute per API key.
         * @summary Delete Data
         * @param {DefaultApiDeleteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteData(requestParameters: DefaultApiDeleteDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponse> {
            return localVarFp.deleteData(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get meeting recording and metadata
         * @summary Get Meeting Data
         * @param {DefaultApiGetMeetingDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingData(requestParameters: DefaultApiGetMeetingDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<Metadata> {
            return localVarFp.getMeetingData(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves screenshots captured during the bot\'s session
         * @summary Get Screenshots
         * @param {DefaultApiGetScreenshotsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenshots(requestParameters: DefaultApiGetScreenshotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ScreenshotWrapper>> {
            return localVarFp.getScreenshots(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Have a bot join a meeting, now or in the future. You can provide a `webhook_url` parameter to receive webhook events specific to this bot, overriding your account\'s default webhook URL. Events include recording completion, failures, and transcription updates.
         * @summary Join
         * @param {DefaultApiJoinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        join(requestParameters: DefaultApiJoinRequest, options?: RawAxiosRequestConfig): AxiosPromise<JoinResponse> {
            return localVarFp.join(requestParameters.joinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Leave
         * @summary Leave
         * @param {DefaultApiLeaveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leave(requestParameters: DefaultApiLeaveRequest, options?: RawAxiosRequestConfig): AxiosPromise<LeaveResponse> {
            return localVarFp.leave(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Transcribe or retranscribe a bot\'s audio using the Default or your provided Speech to Text Provider
         * @summary Retranscribe Bot
         * @param {DefaultApiRetranscribeBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retranscribeBot(requestParameters: DefaultApiRetranscribeBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.retranscribeBot(requestParameters.retranscribeBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Retrieves a paginated list of the user\'s bots with essential metadata, including IDs, names, and meeting details. Supports filtering, sorting, and advanced querying options.
     * @summary List Bots with Metadata
     * @param {DefaultApiBotsWithMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    botsWithMetadata(requestParameters?: DefaultApiBotsWithMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListRecentBotsResponse>;

    /**
     * Deletes a bot\'s data including recording, transcription, and logs. Only metadata is retained. Rate limited to 5 requests per minute per API key.
     * @summary Delete Data
     * @param {DefaultApiDeleteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteData(requestParameters: DefaultApiDeleteDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponse>;

    /**
     * Get meeting recording and metadata
     * @summary Get Meeting Data
     * @param {DefaultApiGetMeetingDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMeetingData(requestParameters: DefaultApiGetMeetingDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<Metadata>;

    /**
     * Retrieves screenshots captured during the bot\'s session
     * @summary Get Screenshots
     * @param {DefaultApiGetScreenshotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getScreenshots(requestParameters: DefaultApiGetScreenshotsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ScreenshotWrapper>>;

    /**
     * Have a bot join a meeting, now or in the future. You can provide a `webhook_url` parameter to receive webhook events specific to this bot, overriding your account\'s default webhook URL. Events include recording completion, failures, and transcription updates.
     * @summary Join
     * @param {DefaultApiJoinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    join(requestParameters: DefaultApiJoinRequest, options?: RawAxiosRequestConfig): AxiosPromise<JoinResponse>;

    /**
     * Leave
     * @summary Leave
     * @param {DefaultApiLeaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    leave(requestParameters: DefaultApiLeaveRequest, options?: RawAxiosRequestConfig): AxiosPromise<LeaveResponse>;

    /**
     * Transcribe or retranscribe a bot\'s audio using the Default or your provided Speech to Text Provider
     * @summary Retranscribe Bot
     * @param {DefaultApiRetranscribeBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    retranscribeBot(requestParameters: DefaultApiRetranscribeBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for botsWithMetadata operation in DefaultApi.
 * @export
 * @interface DefaultApiBotsWithMetadataRequest
 */
export interface DefaultApiBotsWithMetadataRequest {
    /**
     * Filter bots by name containing this string.  Performs a case-insensitive partial match on the bot\&#39;s name. Useful for finding bots with specific naming conventions or to locate a particular bot when you don\&#39;t have its ID.  Example: \&quot;Sales\&quot; would match \&quot;Sales Meeting\&quot;, \&quot;Quarterly Sales\&quot;, etc.
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly botName?: string | null

    /**
     * Filter bots created after this date (ISO format).  Limits results to bots created at or after the specified timestamp. Used for time-based filtering to find recent additions.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-01T00:00:00\&quot;
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly createdAfter?: string | null

    /**
     * Filter bots created before this date (ISO format).  Limits results to bots created at or before the specified timestamp. Used for time-based filtering to exclude recent additions.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-31T23:59:59\&quot;
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly createdBefore?: string | null

    /**
     * Cursor for pagination, obtained from previous response.  Used for retrieving the next set of results after a previous call. The cursor value is returned in the &#x60;nextCursor&#x60; field of responses that have additional results available.  Format: Base64-encoded string containing pagination metadata
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly cursor?: string | null

    /**
     * Filter bots ended after this date (ISO format).  Limits results to bots that ended at or after the specified timestamp. Useful for finding completed meetings within a specific time period.  Format: ISO-8601 date-time string (YYYY-MM-DDThh:mm:ss) Example: \&quot;2023-05-01T00:00:00\&quot;
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly endedAfter?: string | null

    /**
     * Filter bots by matching values in the extra JSON payload.  This parameter performs in-memory filtering on the &#x60;extra&#x60; JSON field, similar to a SQL WHERE clause. It reduces the result set to only include bots that match all specified conditions.  Format specifications: - Single condition: \&quot;field:value\&quot; - Multiple conditions: \&quot;field1:value1,field2:value2\&quot;  Examples: - \&quot;customerId:12345\&quot; - Only bots with this customer ID - \&quot;status:active,project:sales\&quot; - Only active bots from sales projects  Notes: - All conditions must match for a bot to be included - Values are matched exactly (case-sensitive) - Bots without the specified field are excluded
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly filterByExtra?: string | null

    /**
     * Maximum number of bots to return in a single request.  Limits the number of results returned in a single API call. This parameter helps control response size and page length.  Default: 10 Minimum: 1 Maximum: 50
     * @type {number}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly limit?: number

    /**
     * Filter bots by meeting URL containing this string.  Performs a case-insensitive partial match on the bot\&#39;s meeting URL. Use this to find bots associated with specific meeting platforms or particular meeting IDs.  Example: \&quot;zoom.us\&quot; would match all Zoom meetings
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly meetingUrl?: string | null

    /**
     * Sort the results by a field in the extra JSON payload.  This parameter performs in-memory sorting on the &#x60;extra&#x60; JSON field, similar to a SQL ORDER BY clause. It changes the order of results but not which results are included.  Format specifications: - Default (ascending): \&quot;field\&quot; - Explicit direction: \&quot;field:asc\&quot; or \&quot;field:desc\&quot;  Examples: - \&quot;customer_id\&quot; - Sort by customer_id (ascending) - \&quot;priority:desc\&quot; - Sort by priority (descending)  Notes: - Applied after all filtering - String comparison is used for sorting - Bots with the field come before bots without it - Can be combined with filter_by_extra
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly sortByExtra?: string | null

    /**
     * NOTE: this is a preview feature and not yet available  Filter bots by speaker name containing this string.  Performs a case-insensitive partial match on the speakers in the meeting. Useful for finding meetings that included a specific person.  Example: \&quot;John\&quot; would match meetings with speakers like \&quot;John Smith\&quot; or \&quot;John Doe\&quot;
     * @type {string}
     * @memberof DefaultApiBotsWithMetadata
     */
    readonly speakerName?: string | null
}

/**
 * Request parameters for deleteData operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteDataRequest
 */
export interface DefaultApiDeleteDataRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof DefaultApiDeleteData
     */
    readonly uuid: string
}

/**
 * Request parameters for getMeetingData operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMeetingDataRequest
 */
export interface DefaultApiGetMeetingDataRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMeetingData
     */
    readonly botId: string
}

/**
 * Request parameters for getScreenshots operation in DefaultApi.
 * @export
 * @interface DefaultApiGetScreenshotsRequest
 */
export interface DefaultApiGetScreenshotsRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof DefaultApiGetScreenshots
     */
    readonly uuid: string
}

/**
 * Request parameters for join operation in DefaultApi.
 * @export
 * @interface DefaultApiJoinRequest
 */
export interface DefaultApiJoinRequest {
    /**
     * 
     * @type {JoinRequest}
     * @memberof DefaultApiJoin
     */
    readonly joinRequest: JoinRequest
}

/**
 * Request parameters for leave operation in DefaultApi.
 * @export
 * @interface DefaultApiLeaveRequest
 */
export interface DefaultApiLeaveRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof DefaultApiLeave
     */
    readonly uuid: string
}

/**
 * Request parameters for retranscribeBot operation in DefaultApi.
 * @export
 * @interface DefaultApiRetranscribeBotRequest
 */
export interface DefaultApiRetranscribeBotRequest {
    /**
     * 
     * @type {RetranscribeBody}
     * @memberof DefaultApiRetranscribeBot
     */
    readonly retranscribeBody: RetranscribeBody
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Retrieves a paginated list of the user\'s bots with essential metadata, including IDs, names, and meeting details. Supports filtering, sorting, and advanced querying options.
     * @summary List Bots with Metadata
     * @param {DefaultApiBotsWithMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public botsWithMetadata(requestParameters: DefaultApiBotsWithMetadataRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).botsWithMetadata(requestParameters.botName, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.cursor, requestParameters.endedAfter, requestParameters.filterByExtra, requestParameters.limit, requestParameters.meetingUrl, requestParameters.sortByExtra, requestParameters.speakerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a bot\'s data including recording, transcription, and logs. Only metadata is retained. Rate limited to 5 requests per minute per API key.
     * @summary Delete Data
     * @param {DefaultApiDeleteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteData(requestParameters: DefaultApiDeleteDataRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteData(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get meeting recording and metadata
     * @summary Get Meeting Data
     * @param {DefaultApiGetMeetingDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMeetingData(requestParameters: DefaultApiGetMeetingDataRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMeetingData(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves screenshots captured during the bot\'s session
     * @summary Get Screenshots
     * @param {DefaultApiGetScreenshotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScreenshots(requestParameters: DefaultApiGetScreenshotsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScreenshots(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Have a bot join a meeting, now or in the future. You can provide a `webhook_url` parameter to receive webhook events specific to this bot, overriding your account\'s default webhook URL. Events include recording completion, failures, and transcription updates.
     * @summary Join
     * @param {DefaultApiJoinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public join(requestParameters: DefaultApiJoinRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).join(requestParameters.joinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Leave
     * @summary Leave
     * @param {DefaultApiLeaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public leave(requestParameters: DefaultApiLeaveRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).leave(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transcribe or retranscribe a bot\'s audio using the Default or your provided Speech to Text Provider
     * @summary Retranscribe Bot
     * @param {DefaultApiRetranscribeBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public retranscribeBot(requestParameters: DefaultApiRetranscribeBotRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).retranscribeBot(requestParameters.retranscribeBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * Meeting BaaS API
 * Meeting BaaS API
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { basePath, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BotParam2 } from '../models';
// @ts-ignore
import type { BotParam3 } from '../models';
// @ts-ignore
import type { Calendar } from '../models';
// @ts-ignore
import type { CreateCalendarParams } from '../models';
// @ts-ignore
import type { CreateCalendarResponse } from '../models';
// @ts-ignore
import type { Event } from '../models';
// @ts-ignore
import type { ListEventResponse } from '../models';
// @ts-ignore
import type { ListRawCalendarsParams } from '../models';
// @ts-ignore
import type { ListRawCalendarsResponse } from '../models';
// @ts-ignore
import type { UpdateCalendarParams } from '../models';
/**
 * CalendarsApi - axios parameter creator
 * @export
 */
export const CalendarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Integrates a new calendar with the system using OAuth credentials. This endpoint establishes a connection with the calendar provider (Google, Microsoft), sets up webhook notifications for real-time updates, and performs an initial sync of all calendar events. It requires OAuth credentials (client ID, client secret, and refresh token) and the platform type. Once created, the calendar is assigned a unique UUID that should be used for all subsequent operations. Returns the newly created calendar object with all integration details.
         * @summary Create Calendar
         * @param {CreateCalendarParams} createCalendarParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar: async (createCalendarParams: CreateCalendarParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCalendarParams' is not null or undefined
            assertParamExists('createCalendar', 'createCalendarParams', createCalendarParams)
            const localVarPath = `/calendars/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCalendarParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently removes a calendar integration by its UUID, including all associated events and bot configurations. This operation cancels any active subscriptions with the calendar provider, stops all webhook notifications, and unschedules any pending recordings. All related resources are cleaned up in the database. This action cannot be undone, and subsequent requests to this calendar\'s UUID will return 404 Not Found errors.
         * @summary Delete Calendar
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteCalendar', 'uuid', uuid)
            const localVarPath = `/calendars/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves detailed information about a specific calendar integration by its UUID. Returns comprehensive calendar data including the calendar name, email address, provider details (Google, Microsoft), sync status, and other metadata. This endpoint is useful for displaying calendar information to users or verifying the status of a calendar integration before performing operations on its events.
         * @summary Get Calendar
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendar: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getCalendar', 'uuid', uuid)
            const localVarPath = `/calendars/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves comprehensive details about a specific calendar event by its UUID. Returns complete event information including title, meeting link, start and end times, organizer status, recurrence information, and the full list of attendees with their names and email addresses. Also includes any associated bot parameters if recording is scheduled for this event. The raw calendar data from the provider is also included for advanced use cases.
         * @summary Get Event
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getEvent', 'uuid', uuid)
            const localVarPath = `/calendar_events/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all calendars that have been integrated with the system for the authenticated user. Returns a list of calendars with their names, email addresses, provider information, and sync status. This endpoint shows only calendars that have been formally connected through the create_calendar endpoint, not all available calendars from the provider.
         * @summary List Calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCalendars: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calendars/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a paginated list of calendar events with comprehensive filtering options. Supports filtering by organizer email, attendee email, date ranges (start_date_gte, start_date_lte), and event status. Results can be limited to upcoming events (default), past events, or all events. Each event includes full details such as meeting links, participants, and recording status. The response includes a \'next\' pagination cursor for retrieving additional results.
         * @summary List Events
         * @param {string} calendarId Calendar ID to filter events by This is required to specify which calendar\&#39;s events to retrieve
         * @param {string | null} [attendeeEmail] If provided, filters events to include only those with this attendee\&#39;s email address Example: \&quot;jane.smith@example.com\&quot;
         * @param {string | null} [cursor] Optional cursor for pagination This value is included in the &#x60;next&#x60; field of the previous response
         * @param {string | null} [organizerEmail] If provided, filters events to include only those with this organizer\&#39;s email address Example: \&quot;john.doe@example.com\&quot;
         * @param {string | null} [startDateGte] If provided, filters events to include only those with a start date greater than or equal to this timestamp Format: ISO-8601 string, e.g., \&quot;2023-01-01T00:00:00Z\&quot;
         * @param {string | null} [startDateLte] If provided, filters events to include only those with a start date less than or equal to this timestamp Format: ISO-8601 string, e.g., \&quot;2023-12-31T23:59:59Z\&quot;
         * @param {string | null} [status] Filter events by meeting status Valid values: \&quot;upcoming\&quot; (default) returns events after current time, \&quot;past\&quot; returns previous events, \&quot;all\&quot; returns both
         * @param {string | null} [updatedAtGte] If provided, fetches only events updated at or after this timestamp Format: ISO-8601 string, e.g., \&quot;2023-01-01T00:00:00Z\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (calendarId: string, attendeeEmail?: string | null, cursor?: string | null, organizerEmail?: string | null, startDateGte?: string | null, startDateLte?: string | null, status?: string | null, updatedAtGte?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            assertParamExists('listEvents', 'calendarId', calendarId)
            const localVarPath = `/calendar_events/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)

            if (attendeeEmail !== undefined) {
                localVarQueryParameter['attendee_email'] = attendeeEmail;
            }

            if (calendarId !== undefined) {
                localVarQueryParameter['calendar_id'] = calendarId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (organizerEmail !== undefined) {
                localVarQueryParameter['organizer_email'] = organizerEmail;
            }

            if (startDateGte !== undefined) {
                localVarQueryParameter['start_date_gte'] = startDateGte;
            }

            if (startDateLte !== undefined) {
                localVarQueryParameter['start_date_lte'] = startDateLte;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (updatedAtGte !== undefined) {
                localVarQueryParameter['updated_at_gte'] = updatedAtGte;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves unprocessed calendar data directly from the provider (Google, Microsoft) using provided OAuth credentials. This endpoint is typically used during the initial setup process to allow users to select which calendars to integrate. Returns a list of available calendars with their unique IDs, email addresses, and primary status. This data is not persisted until a calendar is formally created using the create_calendar endpoint.
         * @summary List Raw Calendars
         * @param {ListRawCalendarsParams} listRawCalendarsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRawCalendars: async (listRawCalendarsParams: ListRawCalendarsParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listRawCalendarsParams' is not null or undefined
            assertParamExists('listRawCalendars', 'listRawCalendarsParams', listRawCalendarsParams)
            const localVarPath = `/calendars/raw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listRawCalendarsParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the configuration of a bot already scheduled to record an event. Allows modification of recording settings, webhook URLs, and other bot parameters without canceling and recreating the scheduled recording. For recurring events, the \'all_occurrences\' parameter determines whether changes apply to all instances or just the specific occurrence. Returns the updated event(s) with the modified bot parameters.
         * @summary Patch Bot
         * @param {string} uuid The UUID identifier
         * @param {BotParam3} botParam3 
         * @param {boolean | null} [allOccurrences] schedule a bot to all occurences of a recurring event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBot: async (uuid: string, botParam3: BotParam3, allOccurrences?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('patchBot', 'uuid', uuid)
            // verify required parameter 'botParam3' is not null or undefined
            assertParamExists('patchBot', 'botParam3', botParam3)
            const localVarPath = `/calendar_events/{uuid}/bot`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)

            if (allOccurrences !== undefined) {
                localVarQueryParameter['all_occurrences'] = allOccurrences;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botParam3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Configures a bot to automatically join and record a specific calendar event at its scheduled time. The request body contains detailed bot configuration, including recording options, streaming settings, and webhook notification URLs. For recurring events, the \'all_occurrences\' parameter can be set to true to schedule recording for all instances of the recurring series, or false (default) to schedule only the specific instance. Returns the updated event(s) with the bot parameters attached.
         * @summary Schedule Record Event
         * @param {string} uuid The UUID identifier
         * @param {BotParam2} botParam2 
         * @param {boolean | null} [allOccurrences] schedule a bot to all occurences of a recurring event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleRecordEvent: async (uuid: string, botParam2: BotParam2, allOccurrences?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('scheduleRecordEvent', 'uuid', uuid)
            // verify required parameter 'botParam2' is not null or undefined
            assertParamExists('scheduleRecordEvent', 'botParam2', botParam2)
            const localVarPath = `/calendar_events/{uuid}/bot`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)

            if (allOccurrences !== undefined) {
                localVarQueryParameter['all_occurrences'] = allOccurrences;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botParam2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a previously scheduled recording for a calendar event and releases associated bot resources. For recurring events, the \'all_occurrences\' parameter controls whether to unschedule from all instances of the recurring series or just the specific occurrence. This operation is idempotent and will not error if no bot was scheduled. Returns the updated event(s) with the bot parameters removed.
         * @summary Unschedule Record Event
         * @param {string} uuid The UUID identifier
         * @param {boolean | null} [allOccurrences] unschedule a bot from all occurences of a recurring event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unscheduleRecordEvent: async (uuid: string, allOccurrences?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('unscheduleRecordEvent', 'uuid', uuid)
            const localVarPath = `/calendar_events/{uuid}/bot`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)

            if (allOccurrences !== undefined) {
                localVarQueryParameter['all_occurrences'] = allOccurrences;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a calendar integration with new credentials or platform while maintaining the same UUID. This operation is performed as an atomic transaction to ensure data integrity. The system automatically unschedules existing bots to prevent duplicates, updates the calendar credentials, and triggers a full resync of all events. Useful when OAuth tokens need to be refreshed or when migrating a calendar between providers. Returns the updated calendar object with its new configuration.
         * @summary Update Calendar
         * @param {string} uuid The UUID identifier
         * @param {UpdateCalendarParams} updateCalendarParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar: async (uuid: string, updateCalendarParams: UpdateCalendarParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('updateCalendar', 'uuid', uuid)
            // verify required parameter 'updateCalendarParams' is not null or undefined
            assertParamExists('updateCalendar', 'updateCalendarParams', updateCalendarParams)
            const localVarPath = `/calendars/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-meeting-baas-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCalendarParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CalendarsApi - functional programming interface
 * @export
 */
export const CalendarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CalendarsApiAxiosParamCreator(configuration)
    return {
        /**
         * Integrates a new calendar with the system using OAuth credentials. This endpoint establishes a connection with the calendar provider (Google, Microsoft), sets up webhook notifications for real-time updates, and performs an initial sync of all calendar events. It requires OAuth credentials (client ID, client secret, and refresh token) and the platform type. Once created, the calendar is assigned a unique UUID that should be used for all subsequent operations. Returns the newly created calendar object with all integration details.
         * @summary Create Calendar
         * @param {CreateCalendarParams} createCalendarParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCalendar(createCalendarParams: CreateCalendarParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCalendarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCalendar(createCalendarParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.createCalendar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Permanently removes a calendar integration by its UUID, including all associated events and bot configurations. This operation cancels any active subscriptions with the calendar provider, stops all webhook notifications, and unschedules any pending recordings. All related resources are cleaned up in the database. This action cannot be undone, and subsequent requests to this calendar\'s UUID will return 404 Not Found errors.
         * @summary Delete Calendar
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCalendar(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCalendar(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.deleteCalendar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves detailed information about a specific calendar integration by its UUID. Returns comprehensive calendar data including the calendar name, email address, provider details (Google, Microsoft), sync status, and other metadata. This endpoint is useful for displaying calendar information to users or verifying the status of a calendar integration before performing operations on its events.
         * @summary Get Calendar
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalendar(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Calendar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalendar(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.getCalendar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves comprehensive details about a specific calendar event by its UUID. Returns complete event information including title, meeting link, start and end times, organizer status, recurrence information, and the full list of attendees with their names and email addresses. Also includes any associated bot parameters if recording is scheduled for this event. The raw calendar data from the provider is also included for advanced use cases.
         * @summary Get Event
         * @param {string} uuid The UUID identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.getEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves all calendars that have been integrated with the system for the authenticated user. Returns a list of calendars with their names, email addresses, provider information, and sync status. This endpoint shows only calendars that have been formally connected through the create_calendar endpoint, not all available calendars from the provider.
         * @summary List Calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCalendars(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Calendar>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCalendars(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.listCalendars']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a paginated list of calendar events with comprehensive filtering options. Supports filtering by organizer email, attendee email, date ranges (start_date_gte, start_date_lte), and event status. Results can be limited to upcoming events (default), past events, or all events. Each event includes full details such as meeting links, participants, and recording status. The response includes a \'next\' pagination cursor for retrieving additional results.
         * @summary List Events
         * @param {string} calendarId Calendar ID to filter events by This is required to specify which calendar\&#39;s events to retrieve
         * @param {string | null} [attendeeEmail] If provided, filters events to include only those with this attendee\&#39;s email address Example: \&quot;jane.smith@example.com\&quot;
         * @param {string | null} [cursor] Optional cursor for pagination This value is included in the &#x60;next&#x60; field of the previous response
         * @param {string | null} [organizerEmail] If provided, filters events to include only those with this organizer\&#39;s email address Example: \&quot;john.doe@example.com\&quot;
         * @param {string | null} [startDateGte] If provided, filters events to include only those with a start date greater than or equal to this timestamp Format: ISO-8601 string, e.g., \&quot;2023-01-01T00:00:00Z\&quot;
         * @param {string | null} [startDateLte] If provided, filters events to include only those with a start date less than or equal to this timestamp Format: ISO-8601 string, e.g., \&quot;2023-12-31T23:59:59Z\&quot;
         * @param {string | null} [status] Filter events by meeting status Valid values: \&quot;upcoming\&quot; (default) returns events after current time, \&quot;past\&quot; returns previous events, \&quot;all\&quot; returns both
         * @param {string | null} [updatedAtGte] If provided, fetches only events updated at or after this timestamp Format: ISO-8601 string, e.g., \&quot;2023-01-01T00:00:00Z\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(calendarId: string, attendeeEmail?: string | null, cursor?: string | null, organizerEmail?: string | null, startDateGte?: string | null, startDateLte?: string | null, status?: string | null, updatedAtGte?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(calendarId, attendeeEmail, cursor, organizerEmail, startDateGte, startDateLte, status, updatedAtGte, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.listEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves unprocessed calendar data directly from the provider (Google, Microsoft) using provided OAuth credentials. This endpoint is typically used during the initial setup process to allow users to select which calendars to integrate. Returns a list of available calendars with their unique IDs, email addresses, and primary status. This data is not persisted until a calendar is formally created using the create_calendar endpoint.
         * @summary List Raw Calendars
         * @param {ListRawCalendarsParams} listRawCalendarsParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRawCalendars(listRawCalendarsParams: ListRawCalendarsParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRawCalendarsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRawCalendars(listRawCalendarsParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.listRawCalendars']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the configuration of a bot already scheduled to record an event. Allows modification of recording settings, webhook URLs, and other bot parameters without canceling and recreating the scheduled recording. For recurring events, the \'all_occurrences\' parameter determines whether changes apply to all instances or just the specific occurrence. Returns the updated event(s) with the modified bot parameters.
         * @summary Patch Bot
         * @param {string} uuid The UUID identifier
         * @param {BotParam3} botParam3 
         * @param {boolean | null} [allOccurrences] schedule a bot to all occurences of a recurring event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBot(uuid: string, botParam3: BotParam3, allOccurrences?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBot(uuid, botParam3, allOccurrences, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.patchBot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Configures a bot to automatically join and record a specific calendar event at its scheduled time. The request body contains detailed bot configuration, including recording options, streaming settings, and webhook notification URLs. For recurring events, the \'all_occurrences\' parameter can be set to true to schedule recording for all instances of the recurring series, or false (default) to schedule only the specific instance. Returns the updated event(s) with the bot parameters attached.
         * @summary Schedule Record Event
         * @param {string} uuid The UUID identifier
         * @param {BotParam2} botParam2 
         * @param {boolean | null} [allOccurrences] schedule a bot to all occurences of a recurring event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleRecordEvent(uuid: string, botParam2: BotParam2, allOccurrences?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleRecordEvent(uuid, botParam2, allOccurrences, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.scheduleRecordEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancels a previously scheduled recording for a calendar event and releases associated bot resources. For recurring events, the \'all_occurrences\' parameter controls whether to unschedule from all instances of the recurring series or just the specific occurrence. This operation is idempotent and will not error if no bot was scheduled. Returns the updated event(s) with the bot parameters removed.
         * @summary Unschedule Record Event
         * @param {string} uuid The UUID identifier
         * @param {boolean | null} [allOccurrences] unschedule a bot from all occurences of a recurring event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unscheduleRecordEvent(uuid: string, allOccurrences?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unscheduleRecordEvent(uuid, allOccurrences, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.unscheduleRecordEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a calendar integration with new credentials or platform while maintaining the same UUID. This operation is performed as an atomic transaction to ensure data integrity. The system automatically unschedules existing bots to prevent duplicates, updates the calendar credentials, and triggers a full resync of all events. Useful when OAuth tokens need to be refreshed or when migrating a calendar between providers. Returns the updated calendar object with its new configuration.
         * @summary Update Calendar
         * @param {string} uuid The UUID identifier
         * @param {UpdateCalendarParams} updateCalendarParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCalendar(uuid: string, updateCalendarParams: UpdateCalendarParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCalendarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCalendar(uuid, updateCalendarParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CalendarsApi.updateCalendar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath = '') => createRequestFunction(localVarAxiosArgs, globalAxios, basePath, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CalendarsApi - factory interface
 * @export
 */
export const CalendarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CalendarsApiFp(configuration)
    return {
        /**
         * Integrates a new calendar with the system using OAuth credentials. This endpoint establishes a connection with the calendar provider (Google, Microsoft), sets up webhook notifications for real-time updates, and performs an initial sync of all calendar events. It requires OAuth credentials (client ID, client secret, and refresh token) and the platform type. Once created, the calendar is assigned a unique UUID that should be used for all subsequent operations. Returns the newly created calendar object with all integration details.
         * @summary Create Calendar
         * @param {CalendarsApiCreateCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCalendar(requestParameters: CalendarsApiCreateCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCalendarResponse> {
            return localVarFp.createCalendar(requestParameters.createCalendarParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently removes a calendar integration by its UUID, including all associated events and bot configurations. This operation cancels any active subscriptions with the calendar provider, stops all webhook notifications, and unschedules any pending recordings. All related resources are cleaned up in the database. This action cannot be undone, and subsequent requests to this calendar\'s UUID will return 404 Not Found errors.
         * @summary Delete Calendar
         * @param {CalendarsApiDeleteCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCalendar(requestParameters: CalendarsApiDeleteCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCalendar(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves detailed information about a specific calendar integration by its UUID. Returns comprehensive calendar data including the calendar name, email address, provider details (Google, Microsoft), sync status, and other metadata. This endpoint is useful for displaying calendar information to users or verifying the status of a calendar integration before performing operations on its events.
         * @summary Get Calendar
         * @param {CalendarsApiGetCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendar(requestParameters: CalendarsApiGetCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<Calendar> {
            return localVarFp.getCalendar(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves comprehensive details about a specific calendar event by its UUID. Returns complete event information including title, meeting link, start and end times, organizer status, recurrence information, and the full list of attendees with their names and email addresses. Also includes any associated bot parameters if recording is scheduled for this event. The raw calendar data from the provider is also included for advanced use cases.
         * @summary Get Event
         * @param {CalendarsApiGetEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(requestParameters: CalendarsApiGetEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<Event> {
            return localVarFp.getEvent(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all calendars that have been integrated with the system for the authenticated user. Returns a list of calendars with their names, email addresses, provider information, and sync status. This endpoint shows only calendars that have been formally connected through the create_calendar endpoint, not all available calendars from the provider.
         * @summary List Calendars
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCalendars(options?: RawAxiosRequestConfig): AxiosPromise<Array<Calendar>> {
            return localVarFp.listCalendars(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a paginated list of calendar events with comprehensive filtering options. Supports filtering by organizer email, attendee email, date ranges (start_date_gte, start_date_lte), and event status. Results can be limited to upcoming events (default), past events, or all events. Each event includes full details such as meeting links, participants, and recording status. The response includes a \'next\' pagination cursor for retrieving additional results.
         * @summary List Events
         * @param {CalendarsApiListEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(requestParameters: CalendarsApiListEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListEventResponse> {
            return localVarFp.listEvents(requestParameters.calendarId, requestParameters.attendeeEmail, requestParameters.cursor, requestParameters.organizerEmail, requestParameters.startDateGte, requestParameters.startDateLte, requestParameters.status, requestParameters.updatedAtGte, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves unprocessed calendar data directly from the provider (Google, Microsoft) using provided OAuth credentials. This endpoint is typically used during the initial setup process to allow users to select which calendars to integrate. Returns a list of available calendars with their unique IDs, email addresses, and primary status. This data is not persisted until a calendar is formally created using the create_calendar endpoint.
         * @summary List Raw Calendars
         * @param {CalendarsApiListRawCalendarsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRawCalendars(requestParameters: CalendarsApiListRawCalendarsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListRawCalendarsResponse> {
            return localVarFp.listRawCalendars(requestParameters.listRawCalendarsParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the configuration of a bot already scheduled to record an event. Allows modification of recording settings, webhook URLs, and other bot parameters without canceling and recreating the scheduled recording. For recurring events, the \'all_occurrences\' parameter determines whether changes apply to all instances or just the specific occurrence. Returns the updated event(s) with the modified bot parameters.
         * @summary Patch Bot
         * @param {CalendarsApiPatchBotRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBot(requestParameters: CalendarsApiPatchBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.patchBot(requestParameters.uuid, requestParameters.botParam3, requestParameters.allOccurrences, options).then((request) => request(axios, basePath));
        },
        /**
         * Configures a bot to automatically join and record a specific calendar event at its scheduled time. The request body contains detailed bot configuration, including recording options, streaming settings, and webhook notification URLs. For recurring events, the \'all_occurrences\' parameter can be set to true to schedule recording for all instances of the recurring series, or false (default) to schedule only the specific instance. Returns the updated event(s) with the bot parameters attached.
         * @summary Schedule Record Event
         * @param {CalendarsApiScheduleRecordEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleRecordEvent(requestParameters: CalendarsApiScheduleRecordEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.scheduleRecordEvent(requestParameters.uuid, requestParameters.botParam2, requestParameters.allOccurrences, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a previously scheduled recording for a calendar event and releases associated bot resources. For recurring events, the \'all_occurrences\' parameter controls whether to unschedule from all instances of the recurring series or just the specific occurrence. This operation is idempotent and will not error if no bot was scheduled. Returns the updated event(s) with the bot parameters removed.
         * @summary Unschedule Record Event
         * @param {CalendarsApiUnscheduleRecordEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unscheduleRecordEvent(requestParameters: CalendarsApiUnscheduleRecordEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.unscheduleRecordEvent(requestParameters.uuid, requestParameters.allOccurrences, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a calendar integration with new credentials or platform while maintaining the same UUID. This operation is performed as an atomic transaction to ensure data integrity. The system automatically unschedules existing bots to prevent duplicates, updates the calendar credentials, and triggers a full resync of all events. Useful when OAuth tokens need to be refreshed or when migrating a calendar between providers. Returns the updated calendar object with its new configuration.
         * @summary Update Calendar
         * @param {CalendarsApiUpdateCalendarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCalendar(requestParameters: CalendarsApiUpdateCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCalendarResponse> {
            return localVarFp.updateCalendar(requestParameters.uuid, requestParameters.updateCalendarParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CalendarsApi - interface
 * @export
 * @interface CalendarsApi
 */
export interface CalendarsApiInterface {
    /**
     * Integrates a new calendar with the system using OAuth credentials. This endpoint establishes a connection with the calendar provider (Google, Microsoft), sets up webhook notifications for real-time updates, and performs an initial sync of all calendar events. It requires OAuth credentials (client ID, client secret, and refresh token) and the platform type. Once created, the calendar is assigned a unique UUID that should be used for all subsequent operations. Returns the newly created calendar object with all integration details.
     * @summary Create Calendar
     * @param {CalendarsApiCreateCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    createCalendar(requestParameters: CalendarsApiCreateCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCalendarResponse>;

    /**
     * Permanently removes a calendar integration by its UUID, including all associated events and bot configurations. This operation cancels any active subscriptions with the calendar provider, stops all webhook notifications, and unschedules any pending recordings. All related resources are cleaned up in the database. This action cannot be undone, and subsequent requests to this calendar\'s UUID will return 404 Not Found errors.
     * @summary Delete Calendar
     * @param {CalendarsApiDeleteCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    deleteCalendar(requestParameters: CalendarsApiDeleteCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves detailed information about a specific calendar integration by its UUID. Returns comprehensive calendar data including the calendar name, email address, provider details (Google, Microsoft), sync status, and other metadata. This endpoint is useful for displaying calendar information to users or verifying the status of a calendar integration before performing operations on its events.
     * @summary Get Calendar
     * @param {CalendarsApiGetCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    getCalendar(requestParameters: CalendarsApiGetCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<Calendar>;

    /**
     * Retrieves comprehensive details about a specific calendar event by its UUID. Returns complete event information including title, meeting link, start and end times, organizer status, recurrence information, and the full list of attendees with their names and email addresses. Also includes any associated bot parameters if recording is scheduled for this event. The raw calendar data from the provider is also included for advanced use cases.
     * @summary Get Event
     * @param {CalendarsApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    getEvent(requestParameters: CalendarsApiGetEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<Event>;

    /**
     * Retrieves all calendars that have been integrated with the system for the authenticated user. Returns a list of calendars with their names, email addresses, provider information, and sync status. This endpoint shows only calendars that have been formally connected through the create_calendar endpoint, not all available calendars from the provider.
     * @summary List Calendars
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    listCalendars(options?: RawAxiosRequestConfig): AxiosPromise<Array<Calendar>>;

    /**
     * Retrieves a paginated list of calendar events with comprehensive filtering options. Supports filtering by organizer email, attendee email, date ranges (start_date_gte, start_date_lte), and event status. Results can be limited to upcoming events (default), past events, or all events. Each event includes full details such as meeting links, participants, and recording status. The response includes a \'next\' pagination cursor for retrieving additional results.
     * @summary List Events
     * @param {CalendarsApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    listEvents(requestParameters: CalendarsApiListEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListEventResponse>;

    /**
     * Retrieves unprocessed calendar data directly from the provider (Google, Microsoft) using provided OAuth credentials. This endpoint is typically used during the initial setup process to allow users to select which calendars to integrate. Returns a list of available calendars with their unique IDs, email addresses, and primary status. This data is not persisted until a calendar is formally created using the create_calendar endpoint.
     * @summary List Raw Calendars
     * @param {CalendarsApiListRawCalendarsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    listRawCalendars(requestParameters: CalendarsApiListRawCalendarsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListRawCalendarsResponse>;

    /**
     * Updates the configuration of a bot already scheduled to record an event. Allows modification of recording settings, webhook URLs, and other bot parameters without canceling and recreating the scheduled recording. For recurring events, the \'all_occurrences\' parameter determines whether changes apply to all instances or just the specific occurrence. Returns the updated event(s) with the modified bot parameters.
     * @summary Patch Bot
     * @param {CalendarsApiPatchBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    patchBot(requestParameters: CalendarsApiPatchBotRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>>;

    /**
     * Configures a bot to automatically join and record a specific calendar event at its scheduled time. The request body contains detailed bot configuration, including recording options, streaming settings, and webhook notification URLs. For recurring events, the \'all_occurrences\' parameter can be set to true to schedule recording for all instances of the recurring series, or false (default) to schedule only the specific instance. Returns the updated event(s) with the bot parameters attached.
     * @summary Schedule Record Event
     * @param {CalendarsApiScheduleRecordEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    scheduleRecordEvent(requestParameters: CalendarsApiScheduleRecordEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>>;

    /**
     * Cancels a previously scheduled recording for a calendar event and releases associated bot resources. For recurring events, the \'all_occurrences\' parameter controls whether to unschedule from all instances of the recurring series or just the specific occurrence. This operation is idempotent and will not error if no bot was scheduled. Returns the updated event(s) with the bot parameters removed.
     * @summary Unschedule Record Event
     * @param {CalendarsApiUnscheduleRecordEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    unscheduleRecordEvent(requestParameters: CalendarsApiUnscheduleRecordEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Event>>;

    /**
     * Updates a calendar integration with new credentials or platform while maintaining the same UUID. This operation is performed as an atomic transaction to ensure data integrity. The system automatically unschedules existing bots to prevent duplicates, updates the calendar credentials, and triggers a full resync of all events. Useful when OAuth tokens need to be refreshed or when migrating a calendar between providers. Returns the updated calendar object with its new configuration.
     * @summary Update Calendar
     * @param {CalendarsApiUpdateCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApiInterface
     */
    updateCalendar(requestParameters: CalendarsApiUpdateCalendarRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateCalendarResponse>;

}

/**
 * Request parameters for createCalendar operation in CalendarsApi.
 * @export
 * @interface CalendarsApiCreateCalendarRequest
 */
export interface CalendarsApiCreateCalendarRequest {
    /**
     * 
     * @type {CreateCalendarParams}
     * @memberof CalendarsApiCreateCalendar
     */
    readonly createCalendarParams: CreateCalendarParams
}

/**
 * Request parameters for deleteCalendar operation in CalendarsApi.
 * @export
 * @interface CalendarsApiDeleteCalendarRequest
 */
export interface CalendarsApiDeleteCalendarRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof CalendarsApiDeleteCalendar
     */
    readonly uuid: string
}

/**
 * Request parameters for getCalendar operation in CalendarsApi.
 * @export
 * @interface CalendarsApiGetCalendarRequest
 */
export interface CalendarsApiGetCalendarRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof CalendarsApiGetCalendar
     */
    readonly uuid: string
}

/**
 * Request parameters for getEvent operation in CalendarsApi.
 * @export
 * @interface CalendarsApiGetEventRequest
 */
export interface CalendarsApiGetEventRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof CalendarsApiGetEvent
     */
    readonly uuid: string
}

/**
 * Request parameters for listEvents operation in CalendarsApi.
 * @export
 * @interface CalendarsApiListEventsRequest
 */
export interface CalendarsApiListEventsRequest {
    /**
     * Calendar ID to filter events by This is required to specify which calendar\&#39;s events to retrieve
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly calendarId: string

    /**
     * If provided, filters events to include only those with this attendee\&#39;s email address Example: \&quot;jane.smith@example.com\&quot;
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly attendeeEmail?: string | null

    /**
     * Optional cursor for pagination This value is included in the &#x60;next&#x60; field of the previous response
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly cursor?: string | null

    /**
     * If provided, filters events to include only those with this organizer\&#39;s email address Example: \&quot;john.doe@example.com\&quot;
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly organizerEmail?: string | null

    /**
     * If provided, filters events to include only those with a start date greater than or equal to this timestamp Format: ISO-8601 string, e.g., \&quot;2023-01-01T00:00:00Z\&quot;
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly startDateGte?: string | null

    /**
     * If provided, filters events to include only those with a start date less than or equal to this timestamp Format: ISO-8601 string, e.g., \&quot;2023-12-31T23:59:59Z\&quot;
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly startDateLte?: string | null

    /**
     * Filter events by meeting status Valid values: \&quot;upcoming\&quot; (default) returns events after current time, \&quot;past\&quot; returns previous events, \&quot;all\&quot; returns both
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly status?: string | null

    /**
     * If provided, fetches only events updated at or after this timestamp Format: ISO-8601 string, e.g., \&quot;2023-01-01T00:00:00Z\&quot;
     * @type {string}
     * @memberof CalendarsApiListEvents
     */
    readonly updatedAtGte?: string | null
}

/**
 * Request parameters for listRawCalendars operation in CalendarsApi.
 * @export
 * @interface CalendarsApiListRawCalendarsRequest
 */
export interface CalendarsApiListRawCalendarsRequest {
    /**
     * 
     * @type {ListRawCalendarsParams}
     * @memberof CalendarsApiListRawCalendars
     */
    readonly listRawCalendarsParams: ListRawCalendarsParams
}

/**
 * Request parameters for patchBot operation in CalendarsApi.
 * @export
 * @interface CalendarsApiPatchBotRequest
 */
export interface CalendarsApiPatchBotRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof CalendarsApiPatchBot
     */
    readonly uuid: string

    /**
     * 
     * @type {BotParam3}
     * @memberof CalendarsApiPatchBot
     */
    readonly botParam3: BotParam3

    /**
     * schedule a bot to all occurences of a recurring event
     * @type {boolean}
     * @memberof CalendarsApiPatchBot
     */
    readonly allOccurrences?: boolean | null
}

/**
 * Request parameters for scheduleRecordEvent operation in CalendarsApi.
 * @export
 * @interface CalendarsApiScheduleRecordEventRequest
 */
export interface CalendarsApiScheduleRecordEventRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof CalendarsApiScheduleRecordEvent
     */
    readonly uuid: string

    /**
     * 
     * @type {BotParam2}
     * @memberof CalendarsApiScheduleRecordEvent
     */
    readonly botParam2: BotParam2

    /**
     * schedule a bot to all occurences of a recurring event
     * @type {boolean}
     * @memberof CalendarsApiScheduleRecordEvent
     */
    readonly allOccurrences?: boolean | null
}

/**
 * Request parameters for unscheduleRecordEvent operation in CalendarsApi.
 * @export
 * @interface CalendarsApiUnscheduleRecordEventRequest
 */
export interface CalendarsApiUnscheduleRecordEventRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof CalendarsApiUnscheduleRecordEvent
     */
    readonly uuid: string

    /**
     * unschedule a bot from all occurences of a recurring event
     * @type {boolean}
     * @memberof CalendarsApiUnscheduleRecordEvent
     */
    readonly allOccurrences?: boolean | null
}

/**
 * Request parameters for updateCalendar operation in CalendarsApi.
 * @export
 * @interface CalendarsApiUpdateCalendarRequest
 */
export interface CalendarsApiUpdateCalendarRequest {
    /**
     * The UUID identifier
     * @type {string}
     * @memberof CalendarsApiUpdateCalendar
     */
    readonly uuid: string

    /**
     * 
     * @type {UpdateCalendarParams}
     * @memberof CalendarsApiUpdateCalendar
     */
    readonly updateCalendarParams: UpdateCalendarParams
}

/**
 * CalendarsApi - object-oriented interface
 * @export
 * @class CalendarsApi
 * @extends {BaseAPI}
 */
export class CalendarsApi extends BaseAPI implements CalendarsApiInterface {
    /**
     * Integrates a new calendar with the system using OAuth credentials. This endpoint establishes a connection with the calendar provider (Google, Microsoft), sets up webhook notifications for real-time updates, and performs an initial sync of all calendar events. It requires OAuth credentials (client ID, client secret, and refresh token) and the platform type. Once created, the calendar is assigned a unique UUID that should be used for all subsequent operations. Returns the newly created calendar object with all integration details.
     * @summary Create Calendar
     * @param {CalendarsApiCreateCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public createCalendar(requestParameters: CalendarsApiCreateCalendarRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).createCalendar(requestParameters.createCalendarParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently removes a calendar integration by its UUID, including all associated events and bot configurations. This operation cancels any active subscriptions with the calendar provider, stops all webhook notifications, and unschedules any pending recordings. All related resources are cleaned up in the database. This action cannot be undone, and subsequent requests to this calendar\'s UUID will return 404 Not Found errors.
     * @summary Delete Calendar
     * @param {CalendarsApiDeleteCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public deleteCalendar(requestParameters: CalendarsApiDeleteCalendarRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).deleteCalendar(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves detailed information about a specific calendar integration by its UUID. Returns comprehensive calendar data including the calendar name, email address, provider details (Google, Microsoft), sync status, and other metadata. This endpoint is useful for displaying calendar information to users or verifying the status of a calendar integration before performing operations on its events.
     * @summary Get Calendar
     * @param {CalendarsApiGetCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public getCalendar(requestParameters: CalendarsApiGetCalendarRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).getCalendar(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves comprehensive details about a specific calendar event by its UUID. Returns complete event information including title, meeting link, start and end times, organizer status, recurrence information, and the full list of attendees with their names and email addresses. Also includes any associated bot parameters if recording is scheduled for this event. The raw calendar data from the provider is also included for advanced use cases.
     * @summary Get Event
     * @param {CalendarsApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public getEvent(requestParameters: CalendarsApiGetEventRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).getEvent(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all calendars that have been integrated with the system for the authenticated user. Returns a list of calendars with their names, email addresses, provider information, and sync status. This endpoint shows only calendars that have been formally connected through the create_calendar endpoint, not all available calendars from the provider.
     * @summary List Calendars
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public listCalendars(options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).listCalendars(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a paginated list of calendar events with comprehensive filtering options. Supports filtering by organizer email, attendee email, date ranges (start_date_gte, start_date_lte), and event status. Results can be limited to upcoming events (default), past events, or all events. Each event includes full details such as meeting links, participants, and recording status. The response includes a \'next\' pagination cursor for retrieving additional results.
     * @summary List Events
     * @param {CalendarsApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public listEvents(requestParameters: CalendarsApiListEventsRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).listEvents(requestParameters.calendarId, requestParameters.attendeeEmail, requestParameters.cursor, requestParameters.organizerEmail, requestParameters.startDateGte, requestParameters.startDateLte, requestParameters.status, requestParameters.updatedAtGte, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves unprocessed calendar data directly from the provider (Google, Microsoft) using provided OAuth credentials. This endpoint is typically used during the initial setup process to allow users to select which calendars to integrate. Returns a list of available calendars with their unique IDs, email addresses, and primary status. This data is not persisted until a calendar is formally created using the create_calendar endpoint.
     * @summary List Raw Calendars
     * @param {CalendarsApiListRawCalendarsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public listRawCalendars(requestParameters: CalendarsApiListRawCalendarsRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).listRawCalendars(requestParameters.listRawCalendarsParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the configuration of a bot already scheduled to record an event. Allows modification of recording settings, webhook URLs, and other bot parameters without canceling and recreating the scheduled recording. For recurring events, the \'all_occurrences\' parameter determines whether changes apply to all instances or just the specific occurrence. Returns the updated event(s) with the modified bot parameters.
     * @summary Patch Bot
     * @param {CalendarsApiPatchBotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public patchBot(requestParameters: CalendarsApiPatchBotRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).patchBot(requestParameters.uuid, requestParameters.botParam3, requestParameters.allOccurrences, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Configures a bot to automatically join and record a specific calendar event at its scheduled time. The request body contains detailed bot configuration, including recording options, streaming settings, and webhook notification URLs. For recurring events, the \'all_occurrences\' parameter can be set to true to schedule recording for all instances of the recurring series, or false (default) to schedule only the specific instance. Returns the updated event(s) with the bot parameters attached.
     * @summary Schedule Record Event
     * @param {CalendarsApiScheduleRecordEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public scheduleRecordEvent(requestParameters: CalendarsApiScheduleRecordEventRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).scheduleRecordEvent(requestParameters.uuid, requestParameters.botParam2, requestParameters.allOccurrences, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels a previously scheduled recording for a calendar event and releases associated bot resources. For recurring events, the \'all_occurrences\' parameter controls whether to unschedule from all instances of the recurring series or just the specific occurrence. This operation is idempotent and will not error if no bot was scheduled. Returns the updated event(s) with the bot parameters removed.
     * @summary Unschedule Record Event
     * @param {CalendarsApiUnscheduleRecordEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public unscheduleRecordEvent(requestParameters: CalendarsApiUnscheduleRecordEventRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).unscheduleRecordEvent(requestParameters.uuid, requestParameters.allOccurrences, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a calendar integration with new credentials or platform while maintaining the same UUID. This operation is performed as an atomic transaction to ensure data integrity. The system automatically unschedules existing bots to prevent duplicates, updates the calendar credentials, and triggers a full resync of all events. Useful when OAuth tokens need to be refreshed or when migrating a calendar between providers. Returns the updated calendar object with its new configuration.
     * @summary Update Calendar
     * @param {CalendarsApiUpdateCalendarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalendarsApi
     */
    public updateCalendar(requestParameters: CalendarsApiUpdateCalendarRequest, options?: RawAxiosRequestConfig) {
        return CalendarsApiFp(this.configuration).updateCalendar(requestParameters.uuid, requestParameters.updateCalendarParams, options).then((request) => request(this.axios, this.basePath));
    }
}


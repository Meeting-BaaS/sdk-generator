/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Meeting BaaS API
 * Meeting BaaS API
 * OpenAPI spec version: 1.1
 */

import type { AxiosRequestConfig, AxiosResponse } from "axios"
import axios from "axios"

import type {
  BotsWithMetadataParams,
  DeleteResponse,
  GetMeetingDataParams,
  JoinRequest,
  JoinResponse,
  LeaveResponse,
  ListRecentBotsResponse,
  Metadata,
  RetranscribeBody,
  ScreenshotsList
} from "../../schema"

/**
 * Have a bot join a meeting, now or in the future. You can provide a `webhook_url` parameter to receive webhook events specific to this bot, overriding your account's default webhook URL. Events include recording completion, failures, and transcription updates.
 * @summary Join
 */
export const join = <TData = AxiosResponse<JoinResponse>>(
  joinRequest: JoinRequest,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post("/bots/", joinRequest, options)
}
/**
 * Leave
 * @summary Leave
 */
export const leave = <TData = AxiosResponse<LeaveResponse>>(
  uuid: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`/bots/${uuid}`, options)
}
/**
 * Get meeting recording and metadata
 * @summary Get Meeting Data
 */
export const getMeetingData = <TData = AxiosResponse<Metadata>>(
  params: GetMeetingDataParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get("/bots/meeting_data", {
    ...options,
    params: { ...params, ...options?.params }
  })
}
/**
 * Deletes a bot's data including recording, transcription, and logs. Only metadata is retained. Rate limited to 5 requests per minute per API key.
 * @summary Delete Data
 */
export const deleteData = <TData = AxiosResponse<DeleteResponse>>(
  uuid: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/bots/${uuid}/delete_data`, undefined, options)
}
/**
 * Retrieves a paginated list of the user's bots with essential metadata, including IDs, names, and meeting details. Supports filtering, sorting, and advanced querying options.
 * @summary List Bots with Metadata
 */
export const botsWithMetadata = <TData = AxiosResponse<ListRecentBotsResponse>>(
  params?: BotsWithMetadataParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get("/bots/bots_with_metadata", {
    ...options,
    params: { ...params, ...options?.params }
  })
}
/**
 * Transcribe or retranscribe a bot's audio using the Default or your provided Speech to Text Provider
 * @summary Retranscribe Bot
 */
export const retranscribeBot = <TData = AxiosResponse<void>>(
  retranscribeBody: RetranscribeBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post("/bots/retranscribe", retranscribeBody, options)
}
/**
 * Retrieves screenshots captured during the bot's session
 * @summary Get Screenshots
 */
export const getScreenshots = <TData = AxiosResponse<ScreenshotsList>>(
  uuid: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`/bots/${uuid}/screenshots`, options)
}

/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Meeting BaaS API
 * Meeting BaaS API
 * OpenAPI spec version: 1.1
 */
import { faker } from "@faker-js/faker"

import { delay, HttpResponse, http } from "msw"
import type {
  DeleteResponse,
  JoinResponse,
  LeaveResponse,
  ListRecentBotsResponse,
  Metadata,
  ScreenshotsList
} from "../../schema"
import { AudioFrequency, SpeechToTextProvider } from "../../schema"

export const getJoinResponseMock = (
  overrideResponse: Partial<JoinResponse> = {}
): JoinResponse => ({ bot_id: faker.string.uuid(), ...overrideResponse })

export const getLeaveResponseMock = (
  overrideResponse: Partial<LeaveResponse> = {}
): LeaveResponse => ({ ok: faker.datatype.boolean(), ...overrideResponse })

export const getGetMeetingDataResponseMock = (
  overrideResponse: Partial<Metadata> = {}
): Metadata => ({
  audio: faker.string.alpha(20),
  bot_data: {
    bot: {
      account_id: faker.number.int({ min: undefined, max: undefined }),
      bot_exited_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      bot_image: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      bot_joined_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      bot_name: faker.string.alpha(20),
      bot_param_id: faker.number.int({ min: undefined, max: undefined }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      deduplication_key: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      diarization_fails: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined
      ]),
      diarization_v2: faker.datatype.boolean(),
      ended_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      enter_message: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      errors: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      event_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined
      ]),
      extra: {
        [faker.string.alphanumeric(5)]: {}
      },
      id: faker.number.int({ min: undefined, max: undefined }),
      meeting_url: faker.string.alpha(20),
      mp4_s3_path: faker.string.alpha(20),
      noone_joined_timeout: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined
      ]),
      recording_mode: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.helpers.arrayElement(["speaker_view"] as const),
            faker.helpers.arrayElement(["gallery_view"] as const),
            faker.helpers.arrayElement(["audio_only"] as const)
          ]),
          null
        ]),
        undefined
      ]),
      reserved: faker.datatype.boolean(),
      scheduled_bot_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined
      ]),
      session_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      speech_to_text_api_key: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      speech_to_text_provider: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(SpeechToTextProvider)),
          null
        ]),
        undefined
      ]),
      streaming_audio_frequency: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.helpers.arrayElement(Object.values(AudioFrequency)),
          null
        ]),
        undefined
      ]),
      streaming_input: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      streaming_output: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      transcription_custom_parameters: {
        [faker.string.alphanumeric(5)]: {}
      },
      transcription_fails: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined
      ]),
      transcription_payloads: faker.helpers.arrayElement([{}, undefined]),
      user_reported_error: faker.helpers.arrayElement([{}, undefined]),
      uuid: faker.string.uuid(),
      waiting_room_timeout: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
        undefined
      ]),
      webhook_url: faker.string.alpha(20),
      zoom_access_token_url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      zoom_sdk_id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ]),
      zoom_sdk_pwd: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ])
    },
    event_uuid: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
    transcripts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        bot_id: faker.number.int({ min: undefined, max: undefined }),
        end_time: faker.helpers.arrayElement([faker.number.float(), undefined]),
        id: faker.number.int({ min: undefined, max: undefined }),
        lang: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        speaker: faker.string.alpha(20),
        start_time: faker.number.float(),
        user_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
          undefined
        ]),
        words: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => ({
            bot_id: faker.number.int({ min: undefined, max: undefined }),
            end_time: faker.number.float(),
            id: faker.number.int({ min: undefined, max: undefined }),
            start_time: faker.number.float(),
            text: faker.string.alpha(20),
            user_id: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null
              ]),
              undefined
            ])
          })
        )
      })
    )
  },
  duration: faker.number.int({ min: undefined, max: undefined }),
  mp4: faker.string.alpha(20),
  speaker_diarization_file: faker.string.alpha(20),
  ...overrideResponse
})

export const getDeleteDataResponseMock = (
  overrideResponse: Partial<DeleteResponse> = {}
): DeleteResponse => ({
  ok: faker.datatype.boolean(),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["deleted"] as const),
    faker.helpers.arrayElement(["partiallyDeleted"] as const),
    faker.helpers.arrayElement(["alreadyDeleted"] as const),
    faker.helpers.arrayElement(["noDataFound"] as const)
  ]),
  ...overrideResponse
})

export const getBotsWithMetadataResponseMock = (
  overrideResponse: Partial<ListRecentBotsResponse> = {}
): ListRecentBotsResponse => ({
  bots: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    access_count: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
      undefined
    ]),
    bot_name: faker.string.alpha(20),
    created_at: faker.string.alpha(20),
    duration: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined
    ]),
    ended_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    extra: {
      [faker.string.alphanumeric(5)]: {}
    },
    id: faker.number.int({ min: undefined, max: undefined }),
    last_accessed_at: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    meeting_url: faker.string.alpha(20),
    session_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    speakers: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.string.alpha(20)
    ),
    uuid: faker.string.uuid()
  })),
  last_updated: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined
  ]),
  next_cursor: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined
  ]),
  ...overrideResponse
})

export const getGetScreenshotsResponseMock = (): ScreenshotsList =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    date: faker.string.alpha(20),
    url: faker.string.alpha(20)
  }))

export const getJoinMockHandler = (
  overrideResponse?:
    | JoinResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<JoinResponse> | JoinResponse)
) => {
  return http.post("https://api.meetingbaas.com/bots/", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getJoinResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getLeaveMockHandler = (
  overrideResponse?:
    | LeaveResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0]
      ) => Promise<LeaveResponse> | LeaveResponse)
) => {
  return http.delete("https://api.meetingbaas.com/bots/:uuid", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLeaveResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetMeetingDataMockHandler = (
  overrideResponse?:
    | Metadata
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Metadata> | Metadata)
) => {
  return http.get("https://api.meetingbaas.com/bots/meeting_data", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetMeetingDataResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getDeleteDataMockHandler = (
  overrideResponse?:
    | DeleteResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<DeleteResponse> | DeleteResponse)
) => {
  return http.post("https://api.meetingbaas.com/bots/:uuid/delete_data", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteDataResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getBotsWithMetadataMockHandler = (
  overrideResponse?:
    | ListRecentBotsResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<ListRecentBotsResponse> | ListRecentBotsResponse)
) => {
  return http.get("https://api.meetingbaas.com/bots/bots_with_metadata", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getBotsWithMetadataResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getRetranscribeBotMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)
) => {
  return http.post("https://api.meetingbaas.com/bots/retranscribe", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getGetScreenshotsMockHandler = (
  overrideResponse?:
    | ScreenshotsList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<ScreenshotsList> | ScreenshotsList)
) => {
  return http.get("https://api.meetingbaas.com/bots/:uuid/screenshots", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetScreenshotsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}
export const getDefaultMock = () => [
  getJoinMockHandler(),
  getLeaveMockHandler(),
  getGetMeetingDataMockHandler(),
  getDeleteDataMockHandler(),
  getBotsWithMetadataMockHandler(),
  getRetranscribeBotMockHandler(),
  getGetScreenshotsMockHandler()
]

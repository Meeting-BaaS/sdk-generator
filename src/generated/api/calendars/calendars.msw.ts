/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Meeting BaaS API
 * Meeting BaaS API
 * OpenAPI spec version: 1.1
 */
import { faker } from "@faker-js/faker"

import { delay, HttpResponse, http } from "msw"
import type {
  Calendar,
  CreateCalendarResponse,
  Event,
  ListEventResponse,
  ListRawCalendarsResponse,
  ResyncAllCalendarsResponse
} from "../../schema"
import { AudioFrequency, SpeechToTextProvider } from "../../schema"

export const getListRawCalendarsResponseMock = (
  overrideResponse: Partial<ListRawCalendarsResponse> = {}
): ListRawCalendarsResponse => ({
  calendars: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      email: faker.string.alpha(20),
      id: faker.string.alpha(20),
      is_primary: faker.datatype.boolean()
    })
  ),
  ...overrideResponse
})

export const getListCalendarsResponseMock = (): Calendar[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    email: faker.string.alpha(20),
    google_id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    resource_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    uuid: faker.string.uuid()
  }))

export const getCreateCalendarResponseMock = (
  overrideResponse: Partial<CreateCalendarResponse> = {}
): CreateCalendarResponse => ({
  calendar: {
    email: faker.string.alpha(20),
    google_id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    resource_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    uuid: faker.string.uuid()
  },
  ...overrideResponse
})

export const getResyncAllCalendarsResponseMock = (
  overrideResponse: Partial<ResyncAllCalendarsResponse> = {}
): ResyncAllCalendarsResponse => ({
  errors: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      [faker.string.alphanumeric(5)]: {}
    }))
  ),
  synced_calendars: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => faker.string.uuid()),
  ...overrideResponse
})

export const getGetCalendarResponseMock = (overrideResponse: Partial<Calendar> = {}): Calendar => ({
  email: faker.string.alpha(20),
  google_id: faker.string.alpha(20),
  name: faker.string.alpha(20),
  resource_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined
  ]),
  uuid: faker.string.uuid(),
  ...overrideResponse
})

export const getUpdateCalendarResponseMock = (
  overrideResponse: Partial<CreateCalendarResponse> = {}
): CreateCalendarResponse => ({
  calendar: {
    email: faker.string.alpha(20),
    google_id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    resource_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    uuid: faker.string.uuid()
  },
  ...overrideResponse
})

export const getGetEventResponseMock = (overrideResponse: Partial<Event> = {}): Event => ({
  attendees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      email: faker.string.alpha(20),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined
      ])
    })
  ),
  bot_param: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        bot_image: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        bot_name: faker.string.alpha(20),
        deduplication_key: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        enter_message: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        extra: {
          [faker.string.alphanumeric(5)]: {}
        },
        noone_joined_timeout: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
          undefined
        ]),
        recording_mode: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(["speaker_view"] as const),
              faker.helpers.arrayElement(["gallery_view"] as const),
              faker.helpers.arrayElement(["audio_only"] as const)
            ]),
            null
          ]),
          undefined
        ]),
        speech_to_text_api_key: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        speech_to_text_provider: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(SpeechToTextProvider)),
            null
          ]),
          undefined
        ]),
        streaming_audio_frequency: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.helpers.arrayElement(Object.values(AudioFrequency)),
            null
          ]),
          undefined
        ]),
        streaming_input: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        streaming_output: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        transcription_custom_parameters: {
          [faker.string.alphanumeric(5)]: {}
        },
        waiting_room_timeout: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined }), null]),
          undefined
        ]),
        webhook_url: faker.string.alpha(20),
        zoom_access_token_url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        zoom_sdk_id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ]),
        zoom_sdk_pwd: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ])
      },
      null
    ]),
    undefined
  ]),
  calendar_uuid: faker.string.uuid(),
  deleted: faker.datatype.boolean(),
  end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  google_id: faker.string.alpha(20),
  is_organizer: faker.datatype.boolean(),
  is_recurring: faker.datatype.boolean(),
  last_updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  meeting_url: faker.string.alpha(20),
  name: faker.string.alpha(20),
  raw: {
    [faker.string.alphanumeric(5)]: {}
  },
  recurring_event_id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined
  ]),
  start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
  uuid: faker.string.uuid(),
  ...overrideResponse
})

export const getScheduleRecordEventResponseMock = (): Event[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    attendees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        email: faker.string.alpha(20),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ])
      })
    ),
    bot_param: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          bot_image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          bot_name: faker.string.alpha(20),
          deduplication_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          enter_message: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          extra: {
            [faker.string.alphanumeric(5)]: {}
          },
          noone_joined_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          recording_mode: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.helpers.arrayElement(["speaker_view"] as const),
                faker.helpers.arrayElement(["gallery_view"] as const),
                faker.helpers.arrayElement(["audio_only"] as const)
              ]),
              null
            ]),
            undefined
          ]),
          speech_to_text_api_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          speech_to_text_provider: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(SpeechToTextProvider)),
              null
            ]),
            undefined
          ]),
          streaming_audio_frequency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(AudioFrequency)),
              null
            ]),
            undefined
          ]),
          streaming_input: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          streaming_output: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          transcription_custom_parameters: {
            [faker.string.alphanumeric(5)]: {}
          },
          waiting_room_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          webhook_url: faker.string.alpha(20),
          zoom_access_token_url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_pwd: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ])
        },
        null
      ]),
      undefined
    ]),
    calendar_uuid: faker.string.uuid(),
    deleted: faker.datatype.boolean(),
    end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    google_id: faker.string.alpha(20),
    is_organizer: faker.datatype.boolean(),
    is_recurring: faker.datatype.boolean(),
    last_updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    meeting_url: faker.string.alpha(20),
    name: faker.string.alpha(20),
    raw: {
      [faker.string.alphanumeric(5)]: {}
    },
    recurring_event_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    uuid: faker.string.uuid()
  }))

export const getUnscheduleRecordEventResponseMock = (): Event[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    attendees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        email: faker.string.alpha(20),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ])
      })
    ),
    bot_param: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          bot_image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          bot_name: faker.string.alpha(20),
          deduplication_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          enter_message: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          extra: {
            [faker.string.alphanumeric(5)]: {}
          },
          noone_joined_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          recording_mode: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.helpers.arrayElement(["speaker_view"] as const),
                faker.helpers.arrayElement(["gallery_view"] as const),
                faker.helpers.arrayElement(["audio_only"] as const)
              ]),
              null
            ]),
            undefined
          ]),
          speech_to_text_api_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          speech_to_text_provider: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(SpeechToTextProvider)),
              null
            ]),
            undefined
          ]),
          streaming_audio_frequency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(AudioFrequency)),
              null
            ]),
            undefined
          ]),
          streaming_input: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          streaming_output: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          transcription_custom_parameters: {
            [faker.string.alphanumeric(5)]: {}
          },
          waiting_room_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          webhook_url: faker.string.alpha(20),
          zoom_access_token_url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_pwd: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ])
        },
        null
      ]),
      undefined
    ]),
    calendar_uuid: faker.string.uuid(),
    deleted: faker.datatype.boolean(),
    end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    google_id: faker.string.alpha(20),
    is_organizer: faker.datatype.boolean(),
    is_recurring: faker.datatype.boolean(),
    last_updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    meeting_url: faker.string.alpha(20),
    name: faker.string.alpha(20),
    raw: {
      [faker.string.alphanumeric(5)]: {}
    },
    recurring_event_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    uuid: faker.string.uuid()
  }))

export const getPatchBotResponseMock = (): Event[] =>
  Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    attendees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        email: faker.string.alpha(20),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ])
      })
    ),
    bot_param: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          bot_image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          bot_name: faker.string.alpha(20),
          deduplication_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          enter_message: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          extra: {
            [faker.string.alphanumeric(5)]: {}
          },
          noone_joined_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          recording_mode: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.helpers.arrayElement(["speaker_view"] as const),
                faker.helpers.arrayElement(["gallery_view"] as const),
                faker.helpers.arrayElement(["audio_only"] as const)
              ]),
              null
            ]),
            undefined
          ]),
          speech_to_text_api_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          speech_to_text_provider: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(SpeechToTextProvider)),
              null
            ]),
            undefined
          ]),
          streaming_audio_frequency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(AudioFrequency)),
              null
            ]),
            undefined
          ]),
          streaming_input: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          streaming_output: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          transcription_custom_parameters: {
            [faker.string.alphanumeric(5)]: {}
          },
          waiting_room_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          webhook_url: faker.string.alpha(20),
          zoom_access_token_url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_pwd: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ])
        },
        null
      ]),
      undefined
    ]),
    calendar_uuid: faker.string.uuid(),
    deleted: faker.datatype.boolean(),
    end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    google_id: faker.string.alpha(20),
    is_organizer: faker.datatype.boolean(),
    is_recurring: faker.datatype.boolean(),
    last_updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    meeting_url: faker.string.alpha(20),
    name: faker.string.alpha(20),
    raw: {
      [faker.string.alphanumeric(5)]: {}
    },
    recurring_event_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    uuid: faker.string.uuid()
  }))

export const getListEventsResponseMock = (
  overrideResponse: Partial<ListEventResponse> = {}
): ListEventResponse => ({
  data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    attendees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        email: faker.string.alpha(20),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined
        ])
      })
    ),
    bot_param: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          bot_image: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          bot_name: faker.string.alpha(20),
          deduplication_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          enter_message: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          extra: {
            [faker.string.alphanumeric(5)]: {}
          },
          noone_joined_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          recording_mode: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.helpers.arrayElement(["speaker_view"] as const),
                faker.helpers.arrayElement(["gallery_view"] as const),
                faker.helpers.arrayElement(["audio_only"] as const)
              ]),
              null
            ]),
            undefined
          ]),
          speech_to_text_api_key: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          speech_to_text_provider: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(SpeechToTextProvider)),
              null
            ]),
            undefined
          ]),
          streaming_audio_frequency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.helpers.arrayElement(Object.values(AudioFrequency)),
              null
            ]),
            undefined
          ]),
          streaming_input: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          streaming_output: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          transcription_custom_parameters: {
            [faker.string.alphanumeric(5)]: {}
          },
          waiting_room_timeout: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null
            ]),
            undefined
          ]),
          webhook_url: faker.string.alpha(20),
          zoom_access_token_url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_id: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ]),
          zoom_sdk_pwd: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.string.alpha(20), null]),
            undefined
          ])
        },
        null
      ]),
      undefined
    ]),
    calendar_uuid: faker.string.uuid(),
    deleted: faker.datatype.boolean(),
    end_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    google_id: faker.string.alpha(20),
    is_organizer: faker.datatype.boolean(),
    is_recurring: faker.datatype.boolean(),
    last_updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    meeting_url: faker.string.alpha(20),
    name: faker.string.alpha(20),
    raw: {
      [faker.string.alphanumeric(5)]: {}
    },
    recurring_event_id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined
    ]),
    start_time: `${faker.date.past().toISOString().split(".")[0]}Z`,
    uuid: faker.string.uuid()
  })),
  next: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined
  ]),
  ...overrideResponse
})

export const getListRawCalendarsMockHandler = (
  overrideResponse?:
    | ListRawCalendarsResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<ListRawCalendarsResponse> | ListRawCalendarsResponse)
) => {
  return http.post("https://api.meetingbaas.com/calendars/raw", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListRawCalendarsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getListCalendarsMockHandler = (
  overrideResponse?:
    | Calendar[]
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Calendar[]> | Calendar[])
) => {
  return http.get("https://api.meetingbaas.com/calendars/", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListCalendarsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getCreateCalendarMockHandler = (
  overrideResponse?:
    | CreateCalendarResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<CreateCalendarResponse> | CreateCalendarResponse)
) => {
  return http.post("https://api.meetingbaas.com/calendars/", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateCalendarResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getResyncAllCalendarsMockHandler = (
  overrideResponse?:
    | ResyncAllCalendarsResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<ResyncAllCalendarsResponse> | ResyncAllCalendarsResponse)
) => {
  return http.post("https://api.meetingbaas.com/calendars/resync_all", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getResyncAllCalendarsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetCalendarMockHandler = (
  overrideResponse?:
    | Calendar
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Calendar> | Calendar)
) => {
  return http.get("https://api.meetingbaas.com/calendars/:uuid", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCalendarResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getDeleteCalendarMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)
) => {
  return http.delete("https://api.meetingbaas.com/calendars/:uuid", async (info) => {
    await delay(1000)
    if (typeof overrideResponse === "function") {
      await overrideResponse(info)
    }
    return new HttpResponse(null, { status: 200 })
  })
}

export const getUpdateCalendarMockHandler = (
  overrideResponse?:
    | CreateCalendarResponse
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<CreateCalendarResponse> | CreateCalendarResponse)
) => {
  return http.patch("https://api.meetingbaas.com/calendars/:uuid", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateCalendarResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getGetEventMockHandler = (
  overrideResponse?:
    | Event
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Event> | Event)
) => {
  return http.get("https://api.meetingbaas.com/calendar_events/:uuid", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetEventResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getScheduleRecordEventMockHandler = (
  overrideResponse?:
    | Event[]
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Event[]> | Event[])
) => {
  return http.post("https://api.meetingbaas.com/calendar_events/:uuid/bot", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getScheduleRecordEventResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getUnscheduleRecordEventMockHandler = (
  overrideResponse?:
    | Event[]
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Event[]> | Event[])
) => {
  return http.delete("https://api.meetingbaas.com/calendar_events/:uuid/bot", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUnscheduleRecordEventResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getPatchBotMockHandler = (
  overrideResponse?:
    | Event[]
    | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Event[]> | Event[])
) => {
  return http.patch("https://api.meetingbaas.com/calendar_events/:uuid/bot", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPatchBotResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}

export const getListEventsMockHandler = (
  overrideResponse?:
    | ListEventResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<ListEventResponse> | ListEventResponse)
) => {
  return http.get("https://api.meetingbaas.com/calendar_events/", async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListEventsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    )
  })
}
export const getCalendarsMock = () => [
  getListRawCalendarsMockHandler(),
  getListCalendarsMockHandler(),
  getCreateCalendarMockHandler(),
  getResyncAllCalendarsMockHandler(),
  getGetCalendarMockHandler(),
  getDeleteCalendarMockHandler(),
  getUpdateCalendarMockHandler(),
  getGetEventMockHandler(),
  getScheduleRecordEventMockHandler(),
  getUnscheduleRecordEventMockHandler(),
  getPatchBotMockHandler(),
  getListEventsMockHandler()
]
